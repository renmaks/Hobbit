using UnityEngine;
using UnityEngine.InputSystem;

[RequireComponent(typeof(Rigidbody))]
public class PlayerController : MonoBehaviour
{
	[SerializeField] private float rotationSpeed = 500f;
	[SerializeField] private float speed = 5f;
	[SerializeField] private float jumpForce = 5f;
	[SerializeField] private Transform groundCheck;
	[SerializeField] private float groundCheckRadius = 0.3f;
	[SerializeField] private LayerMask groundLayer;

	private bool _isGrounded;
	private bool _jumpRequested;

	private Vector2 _input;
	private Vector3 _direction;
	private Rigidbody _rigidbody;
	private float _fallTime;

	const float _linearDampingValue = 3f;
	const float _keyShift = 0.001f;
	const float _gravityScaleMin = 1.5f;
	const float _gravityScaleMax = 5f;
	const float _gravityScaleTime = 0.7f;

	private void Awake()
	{
		_rigidbody = GetComponent<Rigidbody>();
		_rigidbody.constraints = RigidbodyConstraints.FreezeRotationX | 
		                         RigidbodyConstraints.FreezeRotationZ | 
		                         RigidbodyConstraints.FreezeRotationY;
		_rigidbody.linearDamping = _linearDampingValue;
	}

	private void LateUpdate()
	{
		if (_input.sqrMagnitude < _keyShift)
		{
			_direction = Vector3.zero;
			return;
		}
		
		var yaw = Camera.main.transform.eulerAngles.y;
		_direction = Quaternion.Euler(0, yaw, 0) * new Vector3(_input.x, 0, _input.y);
		
	}

	private void FixedUpdate()
	{
		// –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç–æ–∏–º –ª–∏ –Ω–∞ –∑–µ–º–ª–µ
		_isGrounded = Physics.CheckSphere(groundCheck.position, groundCheckRadius, groundLayer);
		
		if (_isGrounded && _jumpRequested)
			Jumping();
			/*_rigidbody.AddForce(Physics.gravity * 1.6f, ForceMode.Acceleration);*/
		
			if (_isGrounded)
			{
				_fallTime = 0f; // —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏
			}
			else
			{
				_fallTime += Time.fixedDeltaTime;

				// –ü—Ä–∏–º–µ—Ä –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏: –æ—Ç 1.0 –¥–æ 2.5 –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—ã
				var gravityScale = Mathf.Lerp(_gravityScaleMin, _gravityScaleMax, _fallTime / _gravityScaleTime);
				_rigidbody.AddForce(Physics.gravity * (gravityScale - 1f), ForceMode.Acceleration);
			}
		
		// "–ì–∞—à–µ–Ω–∏–µ" —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏
		if (_isGrounded && _rigidbody.linearVelocity.y < -1f)
		{
			var v = _rigidbody.linearVelocity;
			v.y = -0.1f;
			_rigidbody.linearVelocity = v;
		}
		

		if (_direction.sqrMagnitude < _keyShift)
			return;
		
		Rotation();
		Movement();
	}
	
	public void Move(InputAction.CallbackContext context)
	{
		_input = context.ReadValue<Vector2>();
	}
	
	public void Jump(InputAction.CallbackContext context)
	{
		if (_isGrounded)
			_jumpRequested = true;
	}
	
	/// <summary>
	/// –î–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	/// </summary>
	/// <returns></returns>
	private void Movement()
	{
		var targetVelocity = _direction * speed;

		// üß† –°–º—è–≥—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–∏
		// –ü–ª–∞–≤–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ 0, –∞ –Ω–µ —Ä–µ–∑–∫–æ
		targetVelocity.y = _isGrounded ? Mathf.Lerp(_rigidbody.linearVelocity.y, 0f, 10f * Time.fixedDeltaTime) : _rigidbody.linearVelocity.y;

		// –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è: —Å–≥–ª–∞–∂–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
		var velocity = Vector3.Lerp(_rigidbody.linearVelocity, targetVelocity, 5f * Time.fixedDeltaTime);
		_rigidbody.linearVelocity = velocity;
	}


	/// <summary>
	/// –ü–æ–≤–æ—Ä–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	/// </summary>
	private void Rotation()
	{
		var targetRotation = Quaternion.LookRotation(_direction, Vector3.up);
		transform.rotation = Quaternion.RotateTowards(transform.rotation, targetRotation, rotationSpeed * Time.fixedDeltaTime);
	}

	/// <summary>
	/// –ü—Ä—ã–∂–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	/// </summary>
	private void Jumping()
	{
		/*// –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç–æ–∏–º –ª–∏ –Ω–∞ –∑–µ–º–ª–µ
		_isGrounded = Physics.CheckSphere(groundCheck.position, groundCheckRadius, groundLayer);*/

		// –ü—Ä—ã–∂–æ–∫
		if (!_jumpRequested)
			return;
		_jumpRequested = false;
		_rigidbody.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
	}
}
